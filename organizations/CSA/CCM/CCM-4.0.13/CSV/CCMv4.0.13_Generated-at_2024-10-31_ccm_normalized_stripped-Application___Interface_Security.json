[
    {
        "Control Domain": "Application & Interface Security",
        "Control Title": "Application and Interface Security Policy and Procedures",
        "Control ID": "AIS-01",
        "CCM_Control Specification": "Establish, document, approve, communicate, apply, evaluate and maintain\npolicies and procedures for application security to provide guidance to the\nappropriate planning, delivery and support of the organization's application\nsecurity capabilities. Review and update the policies and procedures at least\nannually.\n",
        "Implementation Guidelines_CCM Implementation Guidelines v2.0 CSP": "Control Ownership Rationale.\nThis control's implementation responsibility is not impacted by the type of cloud service offerings (IaaS, PaaS, SaaS). Both the CSP and CSC should independently establish their own policies and procedures for guiding the development and implementation of application security capabilities based on the cloud service model in effect within the organizations.\n\nImplementation Guidelines.\nApplicable to all service models:\nThe CSP should establish policies and procedures for guiding the secure development and implementation of cloud applications and application interfaces. The policies should align with the CSP's purpose and strategy with top management's commitment to continuous improvement.\nPolicies should include (but not limited to) provisions on the following:\na. Scope and Objectives: The cloud organization should define the scope and objectives of the AIS policies and procedures\ni. The scope of the policy and procedures, including::\n• The cloud environments and within those the applications and Interfaces (APIs) that should be covered\n• The applicability of the policies and procedures to third-party vendors involved in the development and deployment of cloud-based applications\n• Address cross-functional aspects, incorporating requirements from various teams, such as development, security, operations, and legal\nii. The objectives of the policy and procedures, including:\n• The protection of sensitive and personal data, preventing unauthorized access, and maintaining applications' availability\n• The alignment of the policies and procedures with the organization's overall security strategy and compliance requirements\n• The expected outcomes of implementing and adhering to the policies and procedures (e.g., reduced vulnerability risk, improved security posture)\nb. Application Security Baseline Requirements: Requirements for establishing, documenting, implementing and assessing a centralized security baseline that outlines the minimum security requirements for all cloud-based applications and APIs. This baseline should be based on industry standards (e.g., OWASP), best practices, and the organization's specific risk tolerance\nc. Application Security Metrics: Metrics to track the effectiveness of application security controls and processes that should be regularly reviewed and reported onto to identify trends and areas for improvement\nd. Secure Application Development: Requirements to define and establish a SSDLC governance framework that incorporates security practices throughout the entire development process (i.e., threat modeling, secure design and coding guidelines, security testing and code reviews, remediation, and secure coding training)\ne. Automated Application Security Testing: Requirements for the application security testing tools (automated if possible) integration into the SSDLC to identify vulnerabilities early in the development process\nf. Automated Secure Application Deployment: Requirements for deployment pipelines (automated if possible) to ensure that applications are deployed securely and consistently (e.g., code review, vulnerability scanning, and security configuration management)\ng. In-house or 3rd Party Supplier Application Development: Security requirements for third-party vendors that develop or deploy cloud-based applications for the organization that should be aligned with the organization's security baseline and should cover all phases of the SSDLC\ni. A risk assessment of each third-party vendor before engaging them to evaluate the vendor's security practices, experience, and reputation\nii. A contractual obligation for the third-party vendor should be established to comply with the organization's security requirements\nh. Application Vulnerability Remediation: Vulnerability management requirements to identify, prioritize, and remediate vulnerabilities in cloud-based applications (with automated tools if possible). Requirements should include clear timelines for remediation and escalation procedures for high-risk vulnerabilities\ni. Approval: Approval requirements and senior management involvement to ensure alignment with the organization's strategic goals and risk appetite\ni. An approval process should be established for any changes or modifications to the AIS policy and procedures\nii. A documented record of approvals (including dates, names of approvers, and any relevant comments or discussions) should be maintained\nj. Communication: Effective communication of the policy and procedures should be facilitated to all relevant cloud stakeholders, including developers, operations teams, and CSCs\nk. Maintenance and Reviews: Application security policies and procedures should be documented, reviewed and updated at least annually to ensure alignment with evolving cloud security landscape and to reflect changes in cloud technology, regulations, and risks  \n",
        "Implementation Guidelines_CSC": "Control Ownership Rationale.\nThe control ownership rationale provided for the CSP applies.\n\nImplementation Guidelines.\nThe implementation guidelines provided for the CSP apply.\n\nPolicies should include (but not limited to) provisions on the following:\nThe policies provided for the CSP apply.\n",
        "Auditing Guidelines_Auditing Guidelines": "1. Examine policy and procedures for adequacy, approval, communication, and effectiveness as applicable to planning, delivery, and support of the organization's application security capabilities.\n2. Examine policy and procedures for evidence of review at least annually.\n"
    },
    {
        "Control Domain": "Application & Interface Security",
        "Control Title": "Application Security Baseline Requirements",
        "Control ID": "AIS-02",
        "CCM_Control Specification": "Establish, document and maintain baseline requirements for securing\ndifferent applications.\n",
        "Implementation Guidelines_CCM Implementation Guidelines v2.0 CSP": "Control Ownership Rationale.\nThis control's implementation responsibility is not impacted by the type of cloud service offerings (IaaS, PaaS, SaaS). Both the CSP and CSC are independently responsible for establishing, documenting, and maintaining baseline requirements to secure the various cloud applications that are either produced or consumed.\n\nImplementation Guidelines.\nApplicable to all service models:\nThe baseline requirements should include, but not be limited to:\na. Applications Categorization:\ni. A risk-based approach should be used to identify, classify and categorize all relevant cloud applications and APIs based on the sensitivity, criticality, and the type of data they handle, and regulatory requirements\nii. Specific security requirements should be established for each application type (e.g., configuration, access control, encryption, vulnerability management, and incident response)\nb. Baseline Requirements Documentation:\ni. A security baseline document should be created for each application type in a security requirements specification (SRS)\nii. Include details on each security requirement with respect to specific security controls, configurations, and procedures that should be implemented\nc. Baseline Requirements Implementation:\ni. Cloud infrastructure features and third-party security tools should be used to implement the documented security requirements by their corresponding security controls\nii. Security control implementations and configuration should be implemented using infrastructure as code (IaC) tools\niii. Security controls should be integrated into the SSDLC to ensure security is embedded across all lifecycle phases in adherence to the established baseline requirements\nd. Baseline Review and Updates:\ni. The security baseline requirements should be regularly reviewed and updated to reflect changes in applications technology, evolving threats, industry standards, possible findings from the continuous monitoring and assessment process, and the organization's risk profile\nii. Lessons learned from security incidents and audits should be incorporated into the security baseline\niii. Baseline requirements should be reviewed and approved by management on a periodic basis and/or upon significant changes\ne. Compliance to Baseline Requirements:\ni. Risk assessments should be conducted to evaluate cloud applications security and configurations alignment with the baseline\nii. Baseline requirements should be extended to third-party applications via thorough security assessments ensuring they meet the established baseline requirements before integration into the cloud environment\niii. Automated tools should be used to detect and remediate security violations\nf. Continuous Monitoring and Evaluation: Automated tools, manual reviews, and regular penetration testing for continuous security monitoring, vulnerability assessments, and compliance checks should be employed to ensure ongoing adherence to baseline requirements \n",
        "Implementation Guidelines_CSC": "Control Ownership Rationale.\nThe control ownership rationale provided for the CSP applies.\n\nImplementation Guidelines.\nThe implementation guidelines provided for the CSP apply.\nAdditionally, the IaaS and PaaS CSC should create the baseline requirements for securing the provided cloud services and applications. However, the SaaS CSC should consider adopting the security baseline requirements provided by the CSP and third parties that are managing the underlying infrastructure and platforms. The CSC should ensure that approved configurations are in place for their application stack.\n",
        "Auditing Guidelines_Auditing Guidelines": "1. Examine policy and procedures for adequacy and effectiveness.\n2. Determine if security baseline requirements of respective applications are clearly defined.\n3. Examine the process to determine the baseline for an application.\n"
    },
    {
        "Control Domain": "Application & Interface Security",
        "Control Title": "Application Security Metrics",
        "Control ID": "AIS-03",
        "CCM_Control Specification": "Define and implement technical and operational metrics in alignment\nwith business objectives, security requirements, and compliance obligations.\n",
        "Implementation Guidelines_CCM Implementation Guidelines v2.0 CSP": "Control Ownership Rationale.\nThis control's implementation is a shared and independent responsibility for the CSP and the CSC since both need to define and implement metrics for the cloud applications they manage and according to their own unique business objectives, security requirements, and compliance obligations.\n\nImplementation Guidelines.\nApplicable to all service models:\nBy implementing technical and operational metrics for cloud applications, CSPs can optimize performance, enhance cost efficiency, maintain security, and elevate customer trust.\n\nTo effectively define and develop cloud application security metrics, the CSP should follow a structured approach that aligns with business objectives, security requirements, and compliance obligations.\n\nThe metrics should be documented to include descriptions and efficient and effective ways of gathering underlying data.\na. Purpose and Scope Determination:\ni. The purpose of the metrics should be determined (e.g., to measure security posture, compliance adherence, or risk mitigation effectiveness)\nii. The specific cloud applications or environments to be covered by the metrics should be identified\nb. Key Security Domains:\ni. Security metrics should be categorized into relevant domains (e.g., vulnerability management, access control, data protection, and incident response)\nii. Metrics should be prioritized based on their importance to the organization's security posture and business goals\nc. Measurable Parameters:\ni. For each security domain, specific measurable parameters should be identified that accurately reflect the security posture\nii. Should ensure the selected parameters are quantifiable, consistent, and aligned with industry standards\nd. Thresholds and Benchmarks:\ni. Acceptable thresholds for each metric should be defined, representing acceptable levels of security performance\nii. Metric performance should be compared against industry benchmarks or internal targets to assess security posture\ne. Data Collection and Aggregation:\ni. A mechanism for collecting raw data from relevant sources should be established, such as security tools, logs, and cloud provider APIs\nii. Collected data should be aggregated into meaningful metrics for analysis and reporting\nf. Data Analysis and Visualization:\ni. Data visualization tools should be utilized to present metrics in clear and understandable dashboards and reports\nii. Trends and patterns in metric data should be analyzed to identify potential security issues or areas for improvement\ng. Integration with Existing Processes:\ni. Consider integrating security metrics into existing security reporting and risk management processes\nii. Metrics should be used to inform decision-making and prioritize security investments\nh. Continuous Monitoring and Evaluation:\ni. Metrics performance should be regularly monitored and their effectiveness evaluated in measuring the cloud applications security posture\nii. Metrics should be refined and adapted as security requirements and business objectives evolve\niii. Various reports targeted toward different audiences should be generated from the metrics (e.g., KPIs, and KRIs) to track, quantify, and provide visibility into the effectiveness of the application security posture.  \ni. SMART framework for metrics: A SMART framework can be adopted. SMART stands for Specific, Measurable, Achievable, Relevant, and Time-bound.\ni. Specific: The metric should have a clear and well-defined definition that leaves no room for ambiguity. It should be specific enough to focus on a particular aspect of performance or effectiveness\nii. Measurable: The metric should be quantifiable and expressed in a unit of measurement that allows for tracking and comparison. It should be possible to collect and analyze data to assess the metric's value\niii. Achievable: The metric should be realistic and attainable within the organization's capabilities and resources. Setting overly ambitious targets can lead to discouragement and frustration\niv. Relevant: The metric should align with the organization's goals and objectives. It should provide meaningful information that directly contributes to achieving strategic goals\nv. Time-bound: The metric should have a defined timeframe for measurement and evaluation. This allows for tracking progress and identifying trends over time\n\nTools and toolchains should be employed for automating the measurements collection, generating the reports, and decision-making processes for error reduction and efficiency.\n\nTrends and comparison analysis should be incorporated for continuous improvement and service maturity. The CSP should use the measurement results to improve its SSDLC processes. The entire process should be reviewed on a predetermined schedule or as required by the organization.\n\nUse Case Example:\nThe metric of \"Percentage of vulnerabilities remediated within a specified timeframe\" is taken as an example to see how it applies to the technical measures provided in this control. This metric falls under the Vulnerability Management domain and measures the effectiveness of vulnerability remediation efforts.\na. Purpose and Scope Determination:\ni. Objective: To measure the organization's ability to timely remediate vulnerabilities and reduce the window of exposure to potential attacks\nii. Scope: All cloud applications and infrastructure components\nb. Key Security Domains: Unpatched vulnerabilities can be exploited by attackers to gain unauthorized access or compromise systems\nc. Measurable Parameters: The metric \"Percentage of vulnerabilities remediated within a specified timeframe\" directly quantifies the organization's vulnerability remediation performance\nd. Thresholds and Benchmarks:\ni. Set a target threshold for vulnerability remediation, such as remediating 90% of critical vulnerabilities within 7 days and 70% of high-severity vulnerabilities within 14 days\nii. Compare metric performance against industry benchmarks or internal targets to assess vulnerability remediation effectiveness\ne. Data Collection and Aggregation:\ni. Utilize vulnerability scanning tools to identify vulnerabilities across cloud applications and infrastructure components\nii. Integrate vulnerability scan results with a central vulnerability management platform to track remediation progress\nf. Data Analysis and Visualization:\ni. Generate reports and dashboards that track the percentage of vulnerabilities remediated within the specified timeframe\nii. Visualize trends in vulnerability remediation performance over time to identify areas for improvement\ng. Integration with Existing Processes:\ni. Incorporate vulnerability remediation metric into the organization's security risk management framework\nii. Use metric data to inform resource allocation and prioritization for vulnerability remediation efforts\nh. Continuous Monitoring and Improvement:\ni. Regularly monitor vulnerability remediation performance against established thresholds and benchmarks\nii. Evaluate the effectiveness of vulnerability management processes and make adjustments as needed\n\nExample Summary:\nA CSP has set a target of remediating 95% of critical vulnerabilities within 7 days. Over the past month, the average percentage of critical vulnerabilities remediated within 7 days has been 88%. This indicates that the organization is not meeting its target and may need to improve its vulnerability remediation processes.\n\nOther examples of technical metrics include:\na. Vulnerability Management:\ni. count or percentage of vulnerabilities by weakness\nii. count of critical and high-severity vulnerabilities\niii. count or percentage of vulnerabilities by detection source (e.g., design review, code review, SAST, DAST, penetration test, VDP, bug bounty)\niv. Percentage of vulnerabilities remediated within a specified timeframe\nv. count or percentage of vulnerabilities by environment detected (pre-production vs. production)\nvi. count exceeding remediation service level objectives (SLOs)\nvii. count or percentage of applications using automated security testing by test type (SAST, DAST, SCA)\nviii. count or percentage of applications with completed penetration testing in the last \"n\" months\nix. count or percentage of development teams or individuals who have completed application security training in the last \"n\" months\nb. Access Control:\ni. Percentage of users with least privilege access\nii. Number of unauthorized access attempts\nc. Data Protection:\ni. Percentage of data encrypted at rest and in transit\nii. Number of data loss incidents\nd. Incident Response:\ni. Mean time to detect (MTTD) and mean time to respond (MTTR) to security incidents\nii. Number of incidents successfully contained and remediated\n",
        "Implementation Guidelines_CSC": "Control Ownership Rationale.\nThe control ownership rationale provided for the CSP applies.\n\nImplementation Guidelines.\nThe implementation guidelines provided for the CSP apply.\n",
        "Auditing Guidelines_Auditing Guidelines": "1. Examine policy and procedures for definition of operational metrics, security, and compliance requirements.\n"
    },
    {
        "Control Domain": "Application & Interface Security",
        "Control Title": "Secure Application Design and Development",
        "Control ID": "AIS-04",
        "CCM_Control Specification": "Define and implement a SDLC process for application design, development,\ndeployment, and operation in accordance with security requirements defined by\nthe organization.\n",
        "Implementation Guidelines_CCM Implementation Guidelines v2.0 CSP": "Control Ownership Rationale.\nThis control's implementation responsibility is not impacted by the type of cloud service offerings (IaaS, PaaS, SaaS). Both the CSP and CSC are responsible for independently defining and implementing a Secure Software Development Lifecycle (SSDLC) process for secure application design, development, deployment, and operation in accordance with system security requirements defined by each cloud party.\nFor deployments within the SaaS model, this control resides with the CSP, since SaaS CSPs typically offer ready-to-use applications and services, while the SaaS CSC consumes the service and is not responsible for implementing a SSDLC for application development.\n\nImplementation Guidelines.\nApplicable to all service models:\nCSPs should leverage an SSDLC process to ensure that applications and APIs are securely designed, developed, deployed, and operated in their cloud environments. Integration of security best practices throughout the entire development lifecycle, can help CSPs to effectively protect their applications from vulnerabilities and cyberattacks.\n\nDefining security requirements should be the first step in the SSDLC process to ensure that security is integrated throughout all phases of development. Security requirements should derive from security objectives and/or organizational goals and regulatory requirements. Industry standards should be applied at project inception and every stage of the SSDLC process. To successfully promote SSDLC security, roles and expectations should be clearly defined, published and communicated to relevant stakeholders.\n\nThe following best practices should be followed when implementing an SSDLC:\na. SSDLC Governance: A security governance framework should be implemented that is tailored to the SSDLC and that defines roles, responsibilities, and accountability for security throughout the SSDLC\ni. The CSP's SSDLC processes, at a minimum, should meet the regulatory and CSC's business requirements\nii. The CSP should provide information to CSCs about the SSDLC to the extent compatible with their disclosure policies\nb. DevSecOps: A DevSecOps approach should be defined and implemented that integrates security practices into all stages of the SSDLC, from planning and design to development, testing, deployment, and operation, rather than being an afterthought\nc. Threat Modeling: Threat modeling should be incorporated into the early stages of the SSDLC to identify potential security risks and design mitigation strategies to help developers anticipate and proactively address security issues, reducing the likelihood of vulnerabilities being introduced later in the development cycle\nd. Secure Coding Practices: \ni. Comprehensive security design requirements should be defined that specify the security measures and controls to be implemented throughout the application's architecture\nii. Industry standard (OWASP, etc) secure coding guidelines should be incorporated in the SSDLC\niii. Secure coding guidelines should be followed and implemented respectively (e.g., proper implementation and configuration of security headers, input validation, information output handling, error handling, and proper use of cryptographic libraries)\ne. Open Source Components Secure Use: Secure practices for managing open-source components should be employed, including thorough vulnerability scanning, dependency management, and continuous monitoring for known vulnerabilities. Use trusted open-source repositories and ensure proper attribution and licensing compliance\nf. Vulnerability Management: Continuously scan for and remediate vulnerabilities in code, infrastructure, and third-party components (refer to TVM domain)\ng. Security Testing: Regular security audits, static, dynamic application security testing, and penetration testing should be conducted to identify and address potential security weaknesses (refer to AIS-05 and TVM-06)\nh. Secure Deployment and Configuration Management:\ni. Secure deployment and configuration management practices should be implemented to ensure that cloud-based applications are deployed and configured in a secure manner\nii. Automated tools should be used to enforce consistent configurations and monitor for deviations from security policies\ni. EoL Process: When an application reaches its end-of-life, a CSP should at minimum:\ni. Notify CSCs of the EoL date and provide clear instructions on how to migrate to alternative services\nii. Discontinue providing technical support and updates for the application and archive the application's source code and documentation\niii. Ensure that all application associated data is properly deleted or transferred to the CSC's designated location\niv. Review and assess potential security vulnerabilities during the decommissioning process\n\nThe CSPs should be transparent about their security practices and provide CSCs with the necessary tools and support to meet their security requirements. The CSCs should actively engage with CSPs to ensure that their security requirements are implemented and maintained throughout the SSDLC.\n",
        "Implementation Guidelines_CSC": "Control Ownership Rationale.\nThe control ownership rationale provided for the CSP apply.\n\nImplementation Guidelines.\nThe implementation guidelines provided for the CSP apply.\n",
        "Auditing Guidelines_Auditing Guidelines": "1. Examine policy and procedures for definition of SDLC (Software Development Lifecycle), security, and compliance requirements.\n2. Examine the state of implementation of the SDLC process.\n3. Verify that the SDLC implementation is in accordance with requirements.\n"
    },
    {
        "Control Domain": "Application & Interface Security",
        "Control Title": "Automated Application Security Testing",
        "Control ID": "AIS-05",
        "CCM_Control Specification": "Implement a testing strategy, including criteria for acceptance of\nnew information systems, upgrades and new versions, which provides application\nsecurity assurance and maintains compliance while enabling organizational speed\nof delivery goals. Automate when applicable and possible.\n",
        "Implementation Guidelines_CCM Implementation Guidelines v2.0 CSP": "Control Ownership Rationale.\nThe implementation responsibility of this control is a shared responsibility between the CSP and CSC, however doing so independently from one another. Both parties and each independently are responsible for implementing a robust testing strategy which includes acceptance criteria of new information systems, upgrades and new versions.\n\nImplementation Guidelines.\nApplicable to all service models:\nAs early as the development phase of the SSDLC, the CSP should incorporate security testing to facilitate the identification of security flaws by developers, enabling timely remediation and minimizing the risk of vulnerabilities being introduced into production. \n\nThe following best practices should be followed for implementing an applications security testing strategy:\na. SSDLC and Testing Management: The development team should follow the SSDLC with security best practices to create code that is secure by design, as well as use static and dynamic analysis tools to identify security loopholes present in the code\nb. Continuous CI/CD Testing: Continuous testing should be built into CI/CD pipelines: \ni. Understand that CI/CD is just not delivering the code, rather also an opportunity to adopt a \"shift-left\" approach with continuous testing\nii. Pre-commit and post-commit hooks should be implemented and used\niii. A vulnerability scanner should be used to identify any third-party library issues\niv. An automated scanner should be used to identify hardcoded / default secrets, including access keys, secret key, credentials, private keys, etc.\nc. Static Application Security Testing (SAST): SAST should be used to analyze the application's source code, bytecode, or binary code to detect issues early in the development lifecycle and identify security vulnerabilities, coding errors, and potential weaknesses that could be exploited by attackers (e.g., data/control flow, taint analysis)\nd. Dynamic Application Security Testing (DAST): DAST should be used to test the application in its running state to identify security vulnerabilities by sending requests and analyzing the responses (e.g., fuzz testing, session hijacking, injection testing)\ne. Interactive Application Security Testing (IAST): IAST should be used to combine elements of both SAST and DAST, identify security issues without the need for source code access, and provide real-time feedback on security vulnerabilities during the application's runtime\nf. Penetration Testing: Penetration tests should be performed to simulate real-world cyberattacks to identify potential vulnerabilities and assess the effectiveness of the security measures in place\ng. Input Validation: Input validation test cases should be used to identify injection attacks (e.g., SQL injection, Command Injection, Cross-site scripting (XSS), Cross-Site Request Forgery (CSRF). This includes checking the type, format, length, and range of input data to ensure that it adheres to predefined criteria and does not contain any malicious or unauthorized content\nh. Information Output Handling: Information output filtering test cases should be used to identify information exfiltration attacks (e.g., cleartext output of passwords)\ni. Industry Best Practices: Security test cases should be employed according to OWASP Top 10. Consider also aligning test cases with various compliance standards (e.g., ISO/IEC 27001, AICPA TSC) depending on organizational strategy and requirements\nj. Continuous Monitoring: Continuous monitoring should be required once an application is deployed to test for a crash, DoS, DDoS, unauthenticated scans, etc.\nk. Applications Testing Automation: \ni. The test team should leverage automation to expedite the testing completion process and for efficacy in reducing errors and surfacing security gaps\nii. Automated tools should test applications for both known and unknown vulnerabilities\niii. Criteria should be developed for assessing the automation required by an application, as not all systems will benefit equally\n\nAt minimum, the above multiple test types and integration points are needed to provide the appropriate level of assurance throughout a SSDLC.\n",
        "Implementation Guidelines_CSC": "Control Ownership Rationale.\nIn the IaaS and PaaS models, the CSC owns the application stack and should make sure of its secure testing and deployment in the cloud (see CSP guidelines).  In the SaaS model, the CSC responsibility arises from the fact that SaaS CSPs typically offer ready-to-use applications and services, while the CSC remains accountable for configuring and customizing these services to meet their specific needs and requirements. Consequently, the CSC should ensure that the criteria for upgrades, modifications, or acceptance of new systems and versions align with their organizational security standards, compliance requirements, and application-specific needs. By implementing a rigorous testing strategy, the SaaS CSC can verify the compatibility, appropriate security, and proper functionality of the upgrades or new systems before their integration into the organization's workflow.\n\nImplementation Guidelines.\nFor the IaaS and PaaS CSC, as part of a comprehensive testing strategy, the same guidelines as for the CSP apply, and additionally ensure the proper configuration, upgrades, and secure integration of new systems and new versions of systems and applications. \n\nIn particular with respect to the SaaS CSC, the following implementation guidelines apply:\na. Configuration of Applications: The SaaS customer should configure the application settings and permissions according to their specific business requirements, ensuring that access controls, user privileges, and data encryption are appropriately set up to mitigate security risks and maintain data privacy\nb. Application Upgrades: Prior to implementing any application upgrades, the SaaS customer should conduct thorough testing, including functional, compatibility, and security testing, to ensure that the upgrades do not disrupt the existing workflows or compromise the application's security posture. This also involves maintaining a rollback plan in case any issues arise during the upgrade process\nc. Secure Integration of New Systems: The SaaS customer should evaluate the compatibility of the new systems with the existing infrastructure and conduct comprehensive integration testing to ensure that data integrity, security protocols, and application functionalities are maintained throughout the integration process. Secure authentication mechanisms, data encryption, and access controls should be implemented to mitigate potential security vulnerabilities during the integration of new version systems\n\nAutomation of security testing should be implemented to reduce risks and errors and enable the scaling of security practices to meet organizational demands. Multiple test types and integration points will likely be needed to provide the appropriate level of assurance throughout a SSDLC. Criteria should be developed for assessing the automation required by an application, as not all systems will benefit equally.\n",
        "Auditing Guidelines_Auditing Guidelines": "1. Examine policy and procedures for definition of testing strategies, automation of security testing, and change management.\n2. Determine security assurance and acceptance criteria for the new information system(s).\n3. Determine if the software release process is automated where applicable.\n"
    },
    {
        "Control Domain": "Application & Interface Security",
        "Control Title": "Automated Secure Application Deployment",
        "Control ID": "AIS-06",
        "CCM_Control Specification": "Establish and implement strategies and capabilities for secure, standardized,\nand compliant application deployment. Automate where possible.\n",
        "Implementation Guidelines_CCM Implementation Guidelines v2.0 CSP": "Control Ownership Rationale.\nThe implementation responsibility of this control is a shared responsibility between the CSP and CSC, however doing so independently from one another. The CSP should independently establish and implement strategies for secure application deployment. \n\nImplementation Guidelines.\nApplicable to all service models:\nThe following best practices should be followed for implementing an applications secure deployment strategy:\na. Standardized Deployment Process: Standardized deployment processes should be implemented to ensure consistent and secure application deployments. This includes:\ni. Security requirements definition based on application deployment needs and industry standards to ensure applications are protected from unauthorized access, data breaches, and other cybersecurity threats\nii. Automated deployment pipelines CI/CD should be established to automate the deployment process, minimizing manual intervention and errors\niii. Standardized deployment templates should be developed that encapsulate best practices and configurations for common application scenarios\niv. Automated or manual rollback procedures should be implemented in case of deployment failures or security issues. Regularly test rollback procedures to ensure their effectiveness\nb. Automation Requirements: Automation should be prioritized wherever possible to streamline deployment processes, enhance security, and improve overall efficiency. This includes:\ni. Infrastructure as code (IaC) tools should be used to automate the provisioning and configuration of the cloud infrastructure\nii. Automated testing should be implemented to validate that applications are deployed correctly and securely in the cloud environment (e.g., testing for functional correctness, security configuration)\niii. Automated patch management systems implementation to ensure that cloud resources and applications are up-to-date with the latest security patches\niv. Automated Security Orchestration and Response (SOAR) platforms utilization to automate security response tasks (e.g., threat detection, investigation, and remediation)\nc. Deployment and Automation Technologies:\ni. A curated list of approved deployment and automation technologies should be maintained that have been rigorously vetted for security and compatibility with the organization's infrastructure and applications\nii. Regularly review and update this list to ensure it reflects the latest advancements in secure deployment technologies and best practices\nd. Integration with Existing Processes:\ni. Secure application deployment practices should be identified and seamlessly integrated with existing application deployment processes to minimize disruption and ensure a cohesive deployment workflow\nii. Secure application deployment procedures should be adapted and aligned with the specific deployment tools, methodologies, and automation frameworks already in use\ne. Secure Application Deployment Customization:\ni. Secure application deployment strategies should be customized to address the unique requirements of various deployment environments (e.g., different operating systems, network configurations, and cloud platforms)\nii. Security measures should be tailored to the specific vulnerabilities and risks associated with each deployment environment\nf. Application Deployment Monitoring:\ni. Logging and monitoring mechanisms should be established to track secure application deployment activities, identify anomalies, and detect potential security breaches\nii. Real-time monitoring should be implemented to promptly alert security personnel of any suspicious or unauthorized activities during the deployment process\ng. Deployment Performance Metrics:\ni. Quantitative metrics should be developed and utilized to assess the success of secure application deployments, including deployment time, error rates, and security compliance levels\nii. Metrics should be continuously monitored and evaluated to identify areas for improvement to optimize the secure application deployment process\n",
        "Implementation Guidelines_CSC": "Control Ownership Rationale.\nIn the IaaS and PaaS models, the CSC owns the application and its secure deployment in the cloud.  In the SaaS model, the CSC consumes the application from the CSP and hence it is not responsible for the secure deployment of applications.\n\nImplementation Guidelines.\nThe implementation guidelines provided for the CSP apply.\n",
        "Auditing Guidelines_Auditing Guidelines": "1. Examine policy and procedures for implementation of application deployment. \n2. Determine if segregation of duties (role and responsibilities) is clearly defined among security and application teams.\n3. Determine if Identification and integration process is defined and verified for application deployment processes. \n4. Evaluate the extent of automation deployed, and criteria used.\n"
    },
    {
        "Control Domain": "Application & Interface Security",
        "Control Title": "Application Vulnerability Remediation",
        "Control ID": "AIS-07",
        "CCM_Control Specification": "Define and implement a process to remediate application security\nvulnerabilities, automating remediation when possible.\n",
        "Implementation Guidelines_CCM Implementation Guidelines v2.0 CSP": "Control Ownership Rationale.\nThe implementation responsibility of this control is a shared responsibility between the CSP and CSC, however doing so independently from one another. The CSP is responsible for defining and implementing a process to remediate application security vulnerabilities and automating remediation when possible.\n\nImplementation Guidelines.\nApplicable to all service models:\nApplication security vulnerabilities are a serious threat to cloud-based applications. These vulnerabilities can be exploited by attackers to gain unauthorized access to applications, steal sensitive data, and disrupt operations. CSPs play a critical role in helping CSCs remediate application security vulnerabilities.\n\nThe following best practices should be followed for implementing a vulnerability remediation process:\na. Vulnerability Remediation Scope: A process for defining the scope of a vulnerability remediation should be established (e.g., IaaS CSPs may only be responsible for remediating vulnerabilities in the underlying infrastructure, while PaaS CSPs may also be responsible for remediating vulnerabilities in the platform software)\nb. Remediation Plan: A remediation plan for each vulnerability should be developed and include the steps that need to be taken to remediate the vulnerability, the estimated time to remediate the vulnerability, and the resources that will be required\ni. The plan should include processes and procedures for vulnerabilities remediation in coordination with development teams, the CSC, and for implementing security patches in a timely manner\nc. Remediation Prioritization and Risk Assessment:\ni. The severity and potential impact of identified vulnerabilities should be assessed based on factors such as exploitability, target scope, and potential consequences\nii. Vulnerability assessment tools should be utilized to provide risk scores\niii. Vulnerabilities remediation should be prioritized based on their risk scores, considering factors such as business criticality, asset value, regulatory compliance requirements, and industry standard vulnerability scoring systems such as CVSS if applicable\niv. Threat intelligence feeds should be incorporated into the prioritization process to identify vulnerabilities actively exploited by attackers\nd. Track and Measure Progress: Progress on remediation efforts should be tracked and the effectiveness of the vulnerability remediation process measured\ne. Patch Management Automation: Application of patches should be automated to reduce the time and effort required to remediate vulnerabilities and improve the overall security posture of cloud-based applications (refer to TVM domain)\nf. Remediation Automation:\ni. Configuration management tools should be utilized to automatically correct misconfigured security settings and enforce secure configurations across different environments using secure by default principles\nii. Automated code refactoring tools should be employed to address insecure coding practices and enforce secure coding guidelines within applications\niii. Automated dependency management tools should be utilized to update and replace vulnerable open-source components with patched or updated versions\niv. Automated remediation hooks should be implemented within the CI/CD pipeline to automatically remediate identified vulnerabilities before and after deployment\ng. Remediation Logging: Comprehensive logging of remediation activities should be established to track the remediation process and identify potential issues\nh. Post-Remediation Verification: Post-remediation verification steps should be implemented to ensure that vulnerabilities have been effectively addressed and that no new vulnerabilities have been introduced\ni. Continuous Remediation Monitoring: The effectiveness of the vulnerability remediation process should be continuously monitored and improvements made as needed\nj. Notification and Reporting: Notification and reporting mechanisms should be established to inform relevant stakeholders of any vulnerabilities detected and remediation actions taken\ni. Communicate with CSCs any identified vulnerabilities and the plan to remediate them. Communication should be timely and transparent in accordance with agreed SLAs\n\nVulnerabilities should be identified and remediated as early as possible in the SSDLC and automated processes are ideal for such a task.\n\nVulnerability Scanning and Remediation Examples:\nTo ensure that only secure and hardened container images are used in the application development process, integrate a vulnerability scanner into the CI/CD pipeline specifically for \"image\" scanning. This will guarantee that only secure \"images\" (also known as golden images) are incorporated into the application software builds.\n\nAutomated scanning tools are an effective solution for identifying and remediating such issues. For instance, cloud agent-based tools can be deployed on each active VM instance to continuously scan for third-party security vulnerabilities, with the frequency of scans determined by the organization's security strategy (daily, weekly, etc.).\n",
        "Implementation Guidelines_CSC": "Control Ownership Rationale.\nWidespread vulnerabilities may require action by both the CSP and CSC, however the CSC is responsible for remediating vulnerabilities in their cloud environment.  \n\nIn the SaaS model, the CSC is responsible for identifying vulnerabilities related to any application-level misconfigurations (e.g., API configuration settings, access control settings) that are within the control of the CSC. Therefore, while the SaaS customer is not responsible for identifying infrastructure and insecure code related vulnerabilities on the SaaS application it consumes, it may have to coordinate with the CSP to identify, understand, and manage any vulnerabilities related to the application stack the CSC owns and controls, including the applications vulnerabilities remediation and response scheduling.\n\nImplementation Guidelines.\nThe implementation guidelines as provided for the CSP apply to IaaS, PaaS CSC.\n\nIn addition, as it pertains to the SaaS CSC, misconfigurations can be considered a vulnerability, as they can inadvertently expose the application to security risks and potential breaches.\nSaaS CSC implementation guidelines for application security vulnerabilities remediation include:\na. Configuration Management: Ensuring that the application's configuration settings are appropriately set up to align with the organization's security requirements and best practices. This involves properly configuring access controls, user permissions, and encryption settings (including the use of strong encryption protocols and properly managed encryption keys)\nb. Default Security Configurations: Customize and strengthen default security configurations to align with organizational security policies. To remediate such vulnerabilities: \ni. Regularly review and update default security settings to address emerging security threats\nii. Conduct regular security assessments to identify any weaknesses in default security settings\nc. Access Control Management: Implementing robust access controls and authentication mechanisms to regulate user access and privileges within the SaaS application. This includes managing user roles, permissions, and identity verification to prevent unauthorized access and unauthorized activities within the application\nd. Unmanaged Shadow IT and Unsanctioned Applications: Usage of unsanctioned or unmanaged applications by employees within the SaaS CSC organization can introduce security risks and vulnerabilities that may not be adequately addressed or monitored by the SaaS CSP. To remediate such vulnerabilities:\ni. Implement strict policies to prevent the use of unsanctioned applications and shadow IT\nii. Provide clear guidelines and recommendations to personnel for approved applications and IT resources\niii. Monitor network traffic and application usage to detect any unauthorized or unmanaged applications\n",
        "Auditing Guidelines_Auditing Guidelines": "1. Examine the policy and procedures to remediate application security vulnerabilities and automating remediation.\n2. Evaluate whether roles and responsibilities, including escalation paths for application security incident response and remediation, are defined and effective.\n3. Determine if the organization leverages automation when possible and if this automation increases remediation efficiency.\n"
    }
]