[
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Threat and Vulnerability Management Policy and Procedures",
        "Control ID": "TVM-01",
        "Control Specification": "Establish, document, approve, communicate, apply, evaluate and maintain\n policies and procedures to identify, report and prioritize the remediation of\n vulnerabilities, in order to protect systems against vulnerability exploitation.\n Review and update the policies and procedures at least annually.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n The implementation responsibility for this control is “Shared” and both parties CSP and CSC are independently responsible for implementing policies and procedures to identify, report and prioritize the remediation of vulnerabilities, according to their own business needs and compliance requirements, and irrespectively of the cloud service delivery models (IaaS/PaaS/SaaS).\n \n The CSP may provide the CSC with reasonable and sufficient capabilities and tools to identify vulnerabilities and protect their workloads (including but not limited to: virtual machines, serverless, databases, networks, containers, and web applications).\n \n Implementation Guidelines.\n Applicable to all service models:\n The CSP should establish policy on threat and vulnerability management (TVM) that includes the intent, purpose, and governance of how the CSP will identify and address threats and vulnerabilities for its respective scope under the SSRM.\n \n The CSP is responsible for establishing and implementing procedures to identify, assess, report, and prioritize the remediation of vulnerabilities on the host infrastructure, network devices, virtualization technologies, operating systems, platform applications such as databases and web applications. \n \n Policies should include (but not limited to) provisions on the following:\n a. Scope and Objectives: \n i. A well defined scope for vulnerability management including both on-premise and cloud-based infrastructure (cloud systems, applications, and data). \n ii. Objectives to establish a comprehensive and effective vulnerability management program with emphasis to the need of compliance with applicable laws, regulations, and contractual requirements\n b. Vulnerability Management Program: A vulnerability management program that encompasses the methods that should be used for managing threats and vulnerabilities (incl. the modeling, analysis, threat intel and assessment of threats in the cloud environment and cloud service offering, the methods for vulnerability scanning, assessment, prioritization and remediation processes, and related security validation methods)\n c. Detection Tools Updates: Requirements for a process to update detection tools and configurations\n i. A regular update schedule for all detection tools (e.g., vulnerability scanners, threat intelligence feeds, and IDS/IPS signatures)\n ii. Detection tool updates (automated, if possible), by utilizing automation tools to streamline the update process and minimize manual intervention for timely updates and continuous protection\n d. External Library Vulnerabilities: A process to inventory and monitor external libraries and track external libraries and components within applications and infrastructure\n e. Penetration Testing: Requirements to perform regular penetration testing of cloud infrastructure and applications to uncover potential vulnerabilities and security weaknesses\n i. Appropriate forms of security testing (pentesting, red/blue/purple teaming, breach and attack simulation, etc.)\n ii. Requirements on how sensitive data will be handled during penetration testing\n iii. Requirements for the prioritization and remediation of vulnerabilities identified during penetration testing\n f. Vulnerability Identification: Requirements to utilize automated vulnerability scanning tools to identify known vulnerabilities across cloud infrastructure, applications, and software components\n g. Vulnerability Prioritization: Requirements for the prioritization of identified vulnerabilities based on their severity and potential impact on data security\n h. Vulnerability Remediation Schedule: A well-defined schedule for remediating vulnerabilities based on their priority and urgency\n i. Vulnerability Management Reporting: Requirements to generate regular reports and communicate them to stakeholders, which include a summary of identified vulnerabilities, their severity levels, and remediation status\n j. Vulnerability Management Metrics: Key Performance Indicators (KPIs) defined to measure the effectiveness of vulnerability management processes\n k. Approval: Approval requirements and senior management involvement to ensure alignment with the organization's strategic goals and risk appetite\n i. An approval process should be established for any changes or modifications to the policy and procedures\n ii. A documented record of approvals (including dates, names of approvers, and any relevant comments or discussions) should be maintained\n l. Communication: Effective communication of the policy and procedures should be facilitated to all relevant cloud stakeholders\n m. Maintenance and Reviews: Vulnerability management policies and procedures should be documented, reviewed and updated at least annually to ensure alignment with the evolving cloud security landscape and to reflect changes in cloud technology, regulations, and risks\n \n This policy should reflect the allocation of responsibilities as determined in the service agreement/contract, SLA, and other terms, and make assignments to address any unaddressed needs as determined by any control gap assessment.",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n The implementation guidelines provided for the CSP apply.\n \n In addition, while the SaaS customer is not responsible for identifying infrastructure and insecure code related vulnerabilities on the SaaS application it consumes, it may have to negotiate with the CSP to establish and implement procedures on how the CSP will identify, report (procedures for notification to the CSC) and prioritize the remediation of vulnerabilities on the SaaS application, in order to protect application against vulnerability exploitation. The SaaS customer is responsible for establishing and implementing procedures to identify, assess, report and prioritize the remediation of vulnerabilities relating to applications’ security settings and potential misconfigurations."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Malware Protection Policy and Procedures",
        "Control ID": "TVM-02",
        "Control Specification": "Establish, document, approve, communicate, apply, evaluate and maintain\n policies and procedures to protect against malware on managed assets. Review\n and update the policies and procedures at least annually.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n Malware protection policies and procedures should be implemented and integrated across all computing infrastructure, including compute, network devices, endpoints, and secure access gateways. Therefore, the implementation responsibility of this control pertains to both CSP and CSC, irrespective of the three cloud service delivery models (IaaS/PaaS/SaaS) and it should be independently implemented by each party.\n \n Implementation Guidelines.\n Applicable to all service models:\n The CSP bears the primary responsibility for the effective implementation of policies and procedures aimed at malware protection within the cloud environment. This involves safeguarding CSC data and the cloud infrastructure from evolving malware threats by implementing a layered approach to security and deploying and maintaining robust malware prevention tools, such as antivirus and anti-malware software, across all cloud instances. The CSP must diligently enforce network security controls, including firewalls and intrusion detection/prevention systems, to monitor and filter incoming and outgoing traffic for potential malware threats, as well as, access controls, data encryption, and vulnerability management best practices.\n \n Policies should include (but not limited to) provisions on the following:\n a. Scope and Objectives: \n i. Requirements for both CSPs and CSCs using managed devices that need protection against malware infections\n ii. Objectives to develop and implement malware protection solutions in the cloud computing environment\n b. Layered Malware Protection: A layered approach to malware protection by employing a combination of security solutions, including antivirus, anti-malware, host-based firewalls, network security controls, endpoint detection and response (EDR) tools\n i. Malware protection integration across all cloud computing infrastructure, including VMs, network devices, endpoints’ OSes, and secure access gateways\n ii. Malware protection centralized management, including planning, implementing, assessing, authorizing, and monitoring organizationally-defined malware protection security controls to cohesively address malware within predefined timeframes\n iii. Malware protection on inspecting both inbound and outbound traffic and implementing controls to detect, prevent, block, and remove malware\n iv. Malware protection solutions security configuration to optimize their effectiveness, including enabling real-time protection, scheduled scans, and automatic updates\n v. Malware protection solutions integration with other security controls, such as firewalls, intrusion detection systems (IDS), and data loss prevention (DLP) tools, to create a unified security posture\n vi. Remediation of malware (automated, if possible) by integrating automated malware scanning into the email and file upload systems\n c. Threat Intelligence Integration: Integration of threat intelligence feeds into malware protection solutions to stay updated on the latest threats, indicators of compromise (IOCs), and attack methods\n d. Machine Learning and Artificial Intelligence (ML/AI): Utilization of ML/AI techniques to analyze vast amounts of data, identify patterns, and detect anomalies indicative of malware infections\n e. Sandbox Analysis: Sandbox environments to safely execute suspicious files or code in isolation to observe their behavior and determine their malicious intent\n f. Signature-based and Signatureless Detection: A combined approach of signature-based detection that relies on known malware signatures, with signatureless detection that analyzes file behavior and heuristics to identify unknown threats\n g. Malware Solutions Updates: Regular updates of malware protection solutions with the latest signatures, patches, and detection mechanisms to maintain effectiveness against evolving threats\n h. Malware Solutions Testing: Rigorous testing and evaluation of malware protection solutions to assess their performance, accuracy, and impact on system performance\n i. Monitoring and Alerting: Establishment of monitoring and alerting mechanisms to promptly identify and respond to malware infections\n j. Approval: Approval requirements and senior management involvement to ensure alignment with the organization's strategic goals and risk appetite\n i. An approval process should be established for any changes or modifications to the policy and procedures\n ii. A documented record of approvals (including dates, names of approvers, and any relevant comments or discussions) should be maintained\n k. Communication: Effective communication of the policy and procedures should be facilitated to all relevant cloud stakeholders\n l. Maintenance and Reviews: Malware protection policies and procedures should be documented, reviewed and updated at least annually to ensure alignment with the evolving cloud security landscape and to reflect changes in cloud technology, regulations, and risks\n \n The policy should also include expectations of time objectives for remediation programs that seek to ensure systems are free of infection when they connect to enterprise computing resources. \n \n If malware is identified by antivirus or anti-malware applications using a signature- or behavior-based detection process, its removal should be updated according to applicable contractual agreements and organizational standards.",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP apply.\n \n Implementation Guidelines.\n The implementation guidelines provided for the CSP apply."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Vulnerability Remediation Schedule",
        "Control ID": "TVM-03",
        "Control Specification": "Define, implement and evaluate processes, procedures and technical\n measures to enable both scheduled and emergency responses to vulnerability identifications,\n based on the identified risk.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n The implementation responsibility for this control is “Shared” and both parties CSP and CSC are independently responsible for implementing a vulnerability remediation schedule according to their own business needs and compliance requirements, and irrespectively of the cloud service delivery models (IaaS/PaaS/SaaS).\n \n Implementation Guidelines.\n A comprehensive cloud services Vulnerability Remediation Schedule (VRS) should outline a structured approach to identifying, prioritizing, remediating, and validating vulnerabilities across cloud environments. It should encompass technical measures, processes, and timelines to ensure timely and effective vulnerability remediation management.\n \n IaaS Provider: \n For the host infrastructure, network devices and virtualization technologies, the CSP is responsible for defining, implementing and evaluating processes, procedures, and technical measures to enable both scheduled and emergency responses. A risk-rating process should be utilized to prioritize the remediation of discovered vulnerabilities.\n \n IaaS CSP implementation guidelines for vulnerabilities remediation include (but are not limited to):\n a. Patch Management: Implement rapid patching processes to apply security patches promptly to IaaS resources (VMs, OSes, network devices software), leveraging automation whenever possible. Establish a patch management process and schedule updates during maintenance windows\n b. Configuration Management: Use configuration management tools and automate configuration management, where applicable, to ensure consistent and secure configurations across the IaaS environment\n c. Network Security: Implement network security controls, such as firewalls, intrusion detection/prevention systems (IDS/IPS), and network segmentation, to protect IaaS resources from unauthorized access and malicious traffic\n d. Logging and Monitoring: Implement a centralized logging solution to collect and analyze logs from various IaaS resources for security insights\n \n PaaS Provider: \n For the host infrastructure, network devices, virtualization technologies, operating systems, and platform applications such as databases, the CSP is responsible for defining, implementing, and evaluating processes, procedures, and technical measures to enable both scheduled and emergency responses. A risk-rating process should be utilized to prioritize the remediation of discovered vulnerabilities.\n \n PaaS CSP implementation guidelines for vulnerabilities remediation include (but are not limited to):\n a. Vulnerabilities Patching: Utilize PaaS-specific vulnerability scanning tools to identify vulnerabilities in PaaS applications and services and work with the PaaS provider to address identified vulnerabilities promptly\n b. Secure Coding and Runtime Application Security Protection: Enforce secure coding practices and static code analysis tools to identify and remediate vulnerabilities in PaaS applications before deployment.\n c. Container Security: Utilize container scanning tools to assess and secure container images. Update base images and their dependencies, and integrate container security into CI/CD pipelines\n d. Serverless Security: Utilize tools specific to serverless security. Implement appropriate access controls for serverless services and regularly update serverless configurations\n e. PaaS Configuration Management and PaaS Security Assessment: Utilize PaaS-specific configuration management tools to enforce secure configurations for PaaS applications and services\n f. Runtime Application Security Protection (RASP): Deploy RASP tools to monitor and protect PaaS applications during runtime, detecting and blocking attacks that exploit application vulnerabilities\n \n SaaS Provider: \n For the host infrastructure, network devices, virtualization technologies, operating systems, and platform applications such as databases and web applications, the CSP is responsible for defining, implementing, and evaluating processes, procedures, and technical measures to enable both scheduled and emergency responses. A risk-rating process should be utilized to prioritize the remediation of discovered vulnerabilities.\n \n SaaS CSP implementation guidelines for vulnerabilities remediation include (but are not limited to):\n a. API Security: Assess and secure APIs used in SaaS applications by implementing strong access authentication and authorization mechanisms, encrypting API communications and by reviewing and updating API security configurations.\n b. Applications and Data Access Control Configuration: Enforce secure access control configurations for SaaS applications, cloud services and data (enabling two-factor or multifactor authentication (2FA, MFA), restricting data access, and disabling unnecessary features.\n c. SaaS Usage Monitoring: Monitor SaaS application usage to detect suspicious activity and potential data breaches. Implement SIEM tools to correlate data from SaaS applications with other security sources for proactive vulnerabilities remediation.\n \n Applicable to all service models:\n Implementation best practices for vulnerabilities remediation include (but are not limited to):\n a. Vulnerability Remediation Schedule (VRS): A structured and well-defined vulnerability remediation schedule should be defined and implemented. The VRS should outline:\n i. Classification and prioritization of vulnerabilities for remediation based on risk, in order of their severity and threat to the environment and alignment to the expectations of the TVM Policy\n ii. The timeframes for vulnerability remediation based on severity, where high-risk vulnerabilities are prioritized for immediate remediation while scheduling medium and low-risk vulnerabilities for future remediation efforts\n iii. A centralized patch and configuration management system to streamline the deployment of security patches and security configurations across cloud environments\n iv. Possible Integration with the CSP’s tools to leverage native capabilities for vulnerability management\n v. Automation of workflows for remediation to automatically deploy security patches to applications and infrastructure components, especially in large-scale cloud environments\n vi. Remediation progress monitoring and tracking the closure of identified vulnerabilities, ensuring timely and effective mitigation of security risks\n b. Remediation and Patch Management: A centralized patch and configuration management system should be implemented to streamline the deployment of security patches and security configurations\n i. Patching should be automated whenever possible to reduce manual intervention and minimize the window of vulnerability exposure\n ii. Vulnerability management tools should be utilized to receive real-time notifications of available patches for vulnerable software components\n iii. Exception handling mechanisms should be established for non-automatable patches and provide remediation instructions for manual patching procedures\n iv. A rollback mechanism should be implemented to revert to previous software versions if patching introduces unexpected issues or conflicts\n v. Regular maintenance windows should be scheduled for applying patches to minimize service disruption\n c. Configuration Management: Secure configurations for cloud resources using configuration management tools\n i. A configuration baseline, templates, and automation should be established to ensure consistent and secure configurations across the cloud environment\n ii. Secure configurations should be enforced for cloud resources using configuration management tools to prevent misconfigurations that could introduce vulnerabilities\n d. Vulnerabilities Remediation Validation: A process to validate the effectiveness of remediation efforts by rescanning affected systems after patching should be implemented to ensure vulnerabilities have been successfully addressed\n e. Review and Updates: Regular reviews and updates of the VRS should be conducted to reflect changes in cloud environments, security threats, and vulnerability management tools. The schedule should be adapted to address new vulnerabilities, evolving threats, and emerging security best practices\n \n Vulnerability remediation schedules should be approved and communicated to all relevant stakeholders and included in SLAs.",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n For the virtual machines and deployed platform applications, the CSC is responsible for defining, implementing and evaluating processes, procedures, and technical measures to enable both scheduled and emergency responses. A risk-rating process should be utilized to prioritize the remediation of discovered vulnerabilities. Implementation guidelines provided for the CSP apply.\n \n The SaaS CSCs should secure their data and applications within the SaaS cloud environment. While CSPs implement their own security measures, customers also have specific implementation responsibilities to address vulnerabilities and strengthen their defenses.\n \n SaaS CSC implementation guidelines for vulnerabilities remediation include (but are not limited to):\n a. Configuration Deviations Remediation: Any deviations from the secure configuration baseline should be promptly addressed and remediated for the subscribed SaaS applications and automated tools implemented to enforce and monitor secure configurations\n b. Access Control Misconfigurations: Misconfigured access levels should be fixed and proper access controls implemented to restrict access to data and functionality based on user roles and authorization levels (the principle of least privilege)\n c. Weak Default Settings Update:\n i. Weak default security settings should be modified and updated to enhance security, such as enabling strong passwords, disabling unnecessary features, and enforcing data encryption\n ii. Collaborate with the SaaS provider on remediation efforts, ensuring alignment with their security practices and leveraging their expertise in addressing application-specific security settings requirements\n d. API Misconfigurations Remediation: API misconfigurations should be fixed and strong API authentication and authorization mechanisms implemented, such as API keys, OAuth, or client certificates\n e. Use of Data Encryption: Sensitive data stored in SaaS applications and in transit should be encrypted using strong encryption algorithms according to up-to-date industry standards\n f. Use of MFA: MFA should be enabled for all SaaS applications to add an extra layer of security beyond passwords\n g. Use of Logging and Auditing: Logging and auditing should be enabled for all SaaS application activity and access attempts\n h. Missing Patches Remediation: \n i. CSP-provided patches or updates should be applied to address identified vulnerabilities\n ii. A patching schedule should be implemented and patches tested thoroughly before deployment to avoid disruptions or unintended consequences.\n i. Network Security Misconfigurations Remediation: Firewall rules and network security settings should be properly configured to allow legitimate traffic while blocking unauthorized access and malicious activity\n j. Shadow IT Remediation: Personnel should be encouraged to report their use of non-sanctioned SaaS applications\n k. Improper Data Retention Remediation: Data retention controls that govern the storage, access, and disposal of data should be implemented in compliance with retention policies, regulations and business objectives\n \n Vulnerability remediation schedules should be approved and communicated to all relevant stakeholders and included in SLAs.\n \n Applicable to all service models:\n The implementation guidelines provided for the CSP apply."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Detection Updates",
        "Control ID": "TVM-04",
        "Control Specification": "Define, implement and evaluate processes, procedures and technical\n measures to update detection tools, threat signatures, and indicators of compromise\n on a weekly, or more frequent basis.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n This is a Shared (Independent) control for IaaS, PaaS, and SaaS and should be implemented and operated both by the CSP and the CSC. The types of activities, events, or states for which detection tools, signatures, and indicators of compromise are defined, implemented, and evaluated will vary across each instance of IaaS, PaaS, and SaaS. The CSP and the CSC are independently responsible for determining which such detection specifications are necessary for their respective requirements and to ensure these are adequately defined, implemented, and operated.\n For SaaS implementations, CSPs will typically be responsible for this control; however, there are specific use cases where the CSC and CSP have a shared responsibility in this area.\n \n Implementation Guidelines.\n Applicable to all service models:\n To maintain an effective threat detection posture, the CSP should ensure that the latest stable version of detection tools (e.g., network firewalls, WAF, NIDS, NIPS, HIDS, HIPS, network layer distributed DDoS protection, application layer DDoS protection, anti-malware software) are installed, and threats signatures and indicators of compromise (IoC) updated on a regular basis, preferably weekly or more frequently. The CSP should ensure that relevant updates are made available for the CSC to apply.\n \n Implementation best practices for updating detection tools, threat signatures, and indicators of compromise vulnerabilities include (but are not limited to):\n a. Threat Intelligence Platform: A centralized threat intelligence platform should be implemented to aggregate and curate threat data from various sources, including internal security feeds, industry reports, external threat intelligence providers, and open-source intelligence (OSINT) to provide unified access to threat indicators, signatures, and vulnerabilities\n b. Threat Data Collection and Processing: The process of collecting and processing threat data from various sources should be automated (e.g., via scripts, APIs, or dedicated threat intelligence feeds) and threat data integrated into the threat intelligence platform for analysis and correlation\n c. Threat Prioritization Criteria: Criteria for prioritizing threat data should be established and based on factors such as the severity of the threat, the potential impact on cloud infrastructure and CSCs data\n d. Threat Signatures and Update Framework: A framework should be created for updating threat signatures for detection tools. This framework should include:\n i. Continuous monitoring of threat intelligence feeds and internal security logs for new threats and IoCs\n ii. Analysis of newly identified threats to determine their relevance to the CSP's cloud environment and CSC base\n iii. Updates of threat signatures and IoCs based on the analysis of new threats\n iv. Testing and validation of new signatures and IoCs before deployment to ensure they accurately detect threats without causing false positives\n e. Detection Tools Updates: Updates for detection tools should be regularly scheduled and such tools should be configured to automatically receive updates from the vendor or threat intelligence platform (e.g., IDS/IPS tools, anti-malware software, firewalls) \n f. Version Control for Signatures and IoCs: A version control process for threat signatures and IoCs should be maintained to track changes and facilitate rollbacks if necessary. A version control system (e.g., Git) can be used to manage and store signatures and IoCs\n g. Continuous Monitoring and Evaluation: \n i. The effectiveness of detection tools and the impact of updates on system performance and resource utilization should be continuously monitored. Metrics should be used to measure the success of the threat detection process (e.g., number of threats detected, the rate of false positives, and the time taken to respond to threats)\n ii. Lessons learned from security incidents and threat analysis should be incorporated into the threat detection process\n iii. Security audits and penetration testing should be regularly conducted to assess the effectiveness of the threat detection process and identify potential gaps or weaknesses. Findings should be used to refine the threat detection strategy",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n The implementation guidelines provided for the CSP apply.\n \n In addition, for SaaS implementations, CSPs will typically be responsible for this control; however, there are specific use cases where the CSC and CSP have a shared responsibility in this area.\n \n In specific use cases, the SaaS CSC is typically responsible for determining the types of activities, events, or states for which detection tools, signatures, and indicators of compromise are desired and required and therefore need to be defined, implemented, and evaluated for a given SaaS implementation. The SaaS CSC is responsible for ensuring associated detection specifications are adequately defined, implemented, and operated. These may be accomplished in various ways, including through additional service subscription with the original CSP or through integration with the alternative services of a different third-party provider.\n \n The CSC is, for example, often particularly responsible for defining, implementing, and evaluating processes, procedures, and technical measures to update detection tool involving appropriate application data access, data use, and data movement or exportation, and definition of appropriate or inappropriate user behavior, in relationship to their instances of the SaaS application and its associated data."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "External Library Vulnerabilities",
        "Control ID": "TVM-05",
        "Control Specification": "Define, implement and evaluate processes, procedures and technical\n measures to identify updates for applications which use third party or open\n source libraries according to the organization's vulnerability management policy.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "CSP-Owned",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n This is a “Shared (Independent)” control for IaaS and PaaS, as in both the IaaS and PaaS service models, external libraries and the capabilities and responsibilities for the management of external libraries, including their associated vulnerabilities, can exist in both the CSP- and CSC-controlled layers. For IaaS and PaaS, this control specification therefore should be implemented by each the CSP and the CSC.\n \n For SaaS, external libraries and the capabilities and responsibilities for the management of external libraries, including their associated vulnerabilities, exist exclusively in the CSP layer, and the CSP is solely responsible for the implementation and operation of this control.\n \n Implementation Guidelines.\n Applicable to all service models:\n To effectively identify updates for applications that utilize third-party or open-source libraries, CSPs should implement a comprehensive vulnerability management strategy that encompasses the following implementation best practices:\n a. Third-Party Libraries Inventory: An accurate inventory of all third-party libraries used across the cloud environment should be maintained. \n i. The inventory should include the library name, version, and associated applications\n ii. Tools should be utilized to automate this process and continuously monitor for changes in library usage (e.g., software composition analysis (SCA), dependency management solutions)\n b. Vulnerability Databases Integration: The inventory should be correlated with vulnerability databases (e.g., CVE) to obtain timely notifications about new vulnerabilities affecting the third-party libraries used in the CSP environment\n c. Patching and Deployment: The patching and deployment process for third-party libraries should be automated whenever possible\n d. Open Source Library Security: When incorporating open-source libraries, follow open-source security best practices, such as reviewing the library's code, checking for known vulnerabilities, and ensuring the library is actively maintained\n e. Dependency Management Tools: Employ dependency management tools to keep track of library dependencies and automatically update libraries when new versions are released\n f. Automated Scanning Tools: \n i. Automated scanning tools should be employed to regularly scan applications for vulnerabilities, including those associated with third-party libraries\n ii. Ensure that patching third-party libraries does not introduce new vulnerabilities or compatibility issues\n g. Third-party Vendors Management: \n i. A vendor management process should be implemented to assess the security practices of third-party library vendors for adherence to your organization's security requirements\n ii. A vulnerability disclosure policy should be established for external library vendors, outlining reporting procedures and timelines for vulnerability disclosure and remediation\n iii. Open communication channels should be established with third-party vendors to receive timely information on vulnerabilities and updates.\n h. Third Party Libraries Updates: Subscribe to security advisories and mailing lists related to third-party libraries to stay updated on the latest vulnerabilities and patches.\n i. CI/CD Integration: CI/CD pipelines should be adopted to automate the integration and deployment of new code and library updates\n j. Third-party Libraries License: Compliance should be maintained with open-source licenses and legal obligations associated with third-party libraries (e.g., tracking license changes, adherence to license terms)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n The implementation guidelines provided for the CSP apply.\n \n SaaS Customer:\n Not applicable. The CSP is solely responsible for the implementation and operation of this control."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Penetration Testing",
        "Control ID": "TVM-06",
        "Control Specification": "Define, implement and evaluate processes, procedures and technical\n measures for the periodic performance of penetration testing by independent\n third parties.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Dependent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Dependent)",
        "Control Ownership by Service Delivery Model - SaaS": "CSP-Owned",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n This is a “Shared (Dependent)” control for IaaS and PaaS, as in both the IaaS and PaaS service models, systems, resources, and technologies can exist under the control of either the CSP or CSC where the systems, resources, and technologies are potentially subject to misconfiguration, inadequate design or implementation, or inadequate control against which the performance of such a simulated attack is desirable to determine whether the vulnerability is genuine. For IaaS and PaaS, this control specification should be implemented by each the CSP and the CSC.\n For SaaS, the systems, the resources, and technologies for which a penetration test is valuable exist exclusively in the CSP layer, and the CSP is solely responsible for the implementation and operation of this control.\n There can be vulnerabilities within a SaaS application configuration that can be exploited as part of a penetration test and which are the responsibility of the CSC to manage and remediate; however, those are not pen testing responsibilities addressed through this control but are vulnerability management controls addressed through a number of other TVM family controls.\n When conducting penetration testing in the cloud, the shared responsibility model and what penetration testing activities are permitted by the CSP should be well understood. The service level agreement will likely define the scope of testing that is allowed and how frequently it can be done. \n Irrespective of the cloud service delivery model, the CSP is responsible for defining, implementing, and evaluating processes, procedures, and technical measures for the periodic performance of penetration testing by independent third parties.\n \n Implementation Guidelines.\n Applicable to all service models:\n CSPs should implement a comprehensive penetration testing strategy that encompasses the following implementation best practices:\n \n a. PenTesting Scope: \n i. The scope of penetration testing should be defined, encompassing cloud infrastructure, applications, and data storage \n ii. Objectives for each engagement should be defined, such as identifying critical vulnerabilities, assessing the effectiveness of security controls, and validating compliance with industry standards. \n iii. Limitations or constraints should be identified, such as testing hours and potential impact on production systems\n b. Authorization and Notification: \n i. Formal authorization should be obtained from senior management and ensure alignment with the cloud penetration testing policy\n ii. The CSP should obtain explicit authorization from relevant stakeholders before conducting penetration testing \n iii. CSCs and relevant parties should be notified about the upcoming penetration testing to prevent unnecessary alerts or escalations\n c. Third-Party Pen Testers Selection: Reputable and experienced third-party pen testers should be selected who possess expertise in cloud security and penetration testing methodologies\n i. Third-party pen testers credentials, experience, and ability to handle sensitive data should be evaluated\n ii. The testing firm should comply with industry standards and certifications (e.g., ISO 27001, CREST, or Offensive Security Certified Professional)\n d. Engagement Procedures: Engagement procedures should be established that outline the process from planning and authorization to execution and reporting. Specify communication channels, timelines, and deliverables\n e. Non-Production Environment: A non-production environment should be utilized to conduct penetration testing to minimize disruption to live services and protect sensitive data. The non-production environment should replicate the production environment to provide realistic testing scenarios\n f. Data Handling and Privacy: Data anonymization techniques or sanitized data sets should be implemented and used to prevent unauthorized access or disclosure of sensitive information\n g. PenTesting Methodology: The penetration testing engagement should be initiated by coordinating with the CSP's security team and relevant stakeholders. Industry-standard penetration testing methodologies include OWASP, NIST, or PTES\n i. Thorough reconnaissance should be conducted to gather information about the cloud environment, including its architecture, configurations, and potential vulnerabilities.\n ii. Open-source intelligence (OSINT), vulnerability scanners, and network mapping tools should be utilized and identified vulnerabilities analyzed to assess their severity and potential impact\n iii. Proofs-of-concept (PoCs) are recommended to exploit identified vulnerabilities to demonstrate their real-world impact\n iv. The findings of the penetration testing engagement should be documented to clearly outline the identified vulnerabilities, their severity, and potential impact\n v. Detailed recommendations for remediation should be provided including mitigation strategies and suggested timelines\n vi. A mechanism should be established to track the progress of vulnerability remediation based on the penetration testing findings\n vii. The closure of reported vulnerabilities should be monitored and timely implementation of mitigation strategies ensured\n viii. Follow-up penetration testing engagements should be scheduled to verify the effectiveness of remediation efforts and identify any newly introduced vulnerabilities\n h. PenTesting Results Communication: The results of penetration testing should be communicated to senior management and CSCs providing insights into security enhancements and improvements\n i. Continuous Improvement:\n i. Cloud penetration testing processes should be periodically reviewed and updated based on evolving security threats, cloud technologies, and industry best practices. The scope, objectives, and engagement procedures should be continuously refined to ensure the program remains effective\n ii. Metrics should be defined to measure the success of the cloud penetration testing program, such as the number of vulnerabilities identified, the percentage of vulnerabilities remediated, and the overall improvement in cloud security posture\n \n There will almost certainly be limits on performing penetration tests without the permission of the CSP. The CSP and CSC should ensure that the scope of penetration tests is limited to the boundaries that each is responsible for.\n \n Under non-disclosure agreement (NDA), the CSC may be able to request from the CSP a summary of penetration test findings on the application it consumes, and learn how identified vulnerabilities are tracked and verified following remediation.",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n The implementation guidelines provided for the CSP apply.\n \n Also, the scope of penetration tests should be limited to the CSC’s boundaries (workloads) and should comply with the CSP’s Penetration Testing Rules of Engagement.\n \n SaaS Customer:\n Not applicable. The CSP is solely responsible for the implementation and operation of this control."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Vulnerability Identification",
        "Control ID": "TVM-07",
        "Control Specification": "Define, implement and evaluate processes, procedures and technical\n measures for the detection of vulnerabilities on organizationally managed assets\n at least monthly.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n This is a “Shared (Independent)” control for IaaS, PaaS, and SaaS as in the three service models, assets and resources can exist under the control of either the CSP or CSC, where the respective systems and technologies are potentially subject to vulnerabilities that should be detected and managed. For IaaS and PaaS, potential vulnerabilities of the assets and resources often include both software flaws, misconfigurations, and control gaps and can exist for assets and resources under the control of the CSP as well as those under the control of the CSC. \n For SaaS, potential vulnerabilities of the assets and resources generally include software flaws only for the CSP’s area of control, and misconfiguration and control gap vulnerabilities in both the CSP’s and the CSC’s areas of control.\n \n Implementation Guidelines.\n CSPs provide CSCs with the capabilities and tools to identify vulnerabilities and protect their workloads (such as but not limited to: virtual machines, databases, networks, containers, and web applications).\n \n Under non-disclosure agreement (NDA), the CSC can request from the CSP a summary of identified vulnerabilities on the application they consume and how they are tracked and verified following remediation.\n \n IaaS Provider: \n The CSP is responsible for defining, implementing. and evaluating processes, procedures, and technical measures for the detection of vulnerabilities on organizationally-managed assets (host infrastructure, network devices, and virtualization technologies) at least monthly.\n \n IaaS CSP implementation guidelines for vulnerabilities identification include (but are not limited to):\n a. Automated Vulnerability Scanning: Regularly use vulnerability scanning tools (e.g., open-source OpenVAS) to identify and assess vulnerabilities in virtual machines, operating systems, network devices, and storage within the IaaS environment\n b. Network Traffic Monitoring: Monitor network traffic to detect suspicious patterns that may indicate the presence of vulnerabilities. Look for unusual traffic patterns, such as large amounts of data being transferred or connections from unauthorized sources (e.g., leverage open source tools like Nmap, Wireshark, Nikto)\n c. Penetration Testing: Conduct regular penetration tests using tools (e.g., open-source Metasploit) to simulate attacks on IaaS components, such as virtual machines and network devices’ configurations\n \n PaaS Provider: \n The CSP is responsible for defining, implementing, and evaluating processes, procedures, and technical measures for the detection of vulnerabilities on organizationally-managed assets (host infrastructure, virtualization technologies, operating systems platform & software development of applications, databases, etc.) at least monthly.\n \n PaaS CSP implementation guidelines for vulnerabilities identification include (but are not limited to):\n a. Static Application Security Testing (SAST): Integrate SAST tools (e.g., open-source SonarQube, OSV-Scanner) into the development lifecycle to identify vulnerabilities in the source code and dependencies of applications built on PaaS platforms. Such tools can scan source code to identify potential security flaws, such as SQL injection vulnerabilities and cross-site scripting (XSS) vulnerabilities (e.g., leverage open source tool sqlmap).\n b. Dynamic Application Security Testing (DAST): Perform dynamic testing to identify vulnerabilities during applications runtime (consider leveraging open-source tools like OWASP Zed Attack Proxy (ZAP))\n c. Container Security Scanning: Integrate container security scanning tools (e.g., open-source Clair) into the CI/CD pipeline to identify vulnerabilities in container images\n \n SaaS Provider: \n The CSP is responsible for defining, implementing, and evaluating processes, procedures and technical measures for the detection of vulnerabilities on organizationally-managed assets (host infrastructure, network devices, virtualization technologies, operating systems, platform applications such as databases, and web applications) at least monthly.\n \n SaaS CSP implementation guidelines for vulnerabilities identification include (but are not limited to):\n a. Application Security Assessments: Conduct thorough security assessments on the SaaS applications and web applications using a combination of manual code reviews and open-source automated scanners (e.g., Bandit, ESLint, Wapiti, OpenSCAP, Nikto2, Burp Suite Community Edition, MobSF).\n b. API Security Testing: Test the security of APIs used in SaaS applications using relevant tools (e.g., open source Postman and OWASP API Security Project).\n c. Data Protection Measures: Implement measures to protect sensitive data within the SaaS application, including encryption, access controls, and data loss prevention (DLP) policies (e.g., leverage open-source tools like OpenDLP)\n \n Applicable to all service models:\n Implementation best practices for vulnerabilities identification include (but are not limited to):\n a. Vulnerability Scanning Tools and Schedule: \n i. Vulnerability scanning tools (automated, if possible) should be utilized to regularly scan the cloud infrastructure, applications, and data for known vulnerabilities\n ii. Vulnerability scanning tools should be integrated into continuous integration/continuous delivery (CI/CD) pipelines to identify and address vulnerabilities early in the development process\n iii. A regular scanning schedule should be defined to ensure timely detection of newly discovered vulnerabilities and minimize exposure to potential attacks\n b. Log Analysis: Logs from the cloud infrastructure components should be analyzed to identify anomalies and potential open vulnerabilities (e.g., improperly defined access rules, gaps to systems configurations)\n c. Threat Intelligence Feeds: Threat intelligence feeds should be leveraged to stay informed about emerging vulnerabilities, threat trends, and exploited vulnerabilities in order to prioritize vulnerability scanning and remediation efforts, focusing on vulnerabilities that are actively being targeted by attackers\n d. Vulnerability Databases and CVEs: \n i. A vulnerability database of known vulnerabilities, including their severity levels, potential exploits, and recommended remediation steps. Lessons learned from vulnerability incidents should be integrated for continuous improvement\n ii. This database should be maintained and regularly updated with the latest Common Vulnerabilities and Exposures (CVEs) that serves as a reference point for identifying and prioritizing vulnerabilities\n e. Vulnerability Assessments and Penetration Testing (VAPT): Engage in regular VAPT exercises to identify and exploit potential vulnerabilities that may not be detected by automated scanning tools (refer to TVM-06)\n f. Configuration Management: Configuration management tools should be leveraged (e.g., open-source Ansible) to enforce secure configurations and reduce the risk of misconfigurations\n g. Reporting and Escalation Procedures: Reporting and escalation procedures for identified vulnerabilities should be implemented\n i. These procedures should outline who is responsible for remediation, the timelines for addressing vulnerabilities, and the mechanism for escalation in case of critical or high-risk vulnerabilities\n ii. The CSP should provide CSC with guidelines to protect against threats and vulnerabilities and external library vulnerabilities using appropriate tools, relevant automation, and operational frameworks within risk tolerance\n h. Continuous Monitoring and Evaluation: The effectiveness of vulnerability identification processes should be continuously monitored and evaluated, and adjustments made as needed\n \n The integrated TVM system should track vulnerabilities to closure and report them to build oversight of residual risks. Furthermore, the system should retain information that can be reused in future remediation activities.\n \n The CSP should consider establishing an external-facing vulnerability disclosure program to allow external parties to communicate detected vulnerabilities.",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n IaaS Customer: \n The CSC is responsible for defining, implementing. and evaluating processes, procedures, and technical measures for the detection of vulnerabilities on organizationally-managed assets (host infrastructure, network devices, and virtualization technologies) at least monthly.\n Implementation guidelines and tools provided for the CSP apply.\n \n PaaS Customer: \n The CSC is responsible for defining, implementing, and evaluating processes, procedures, and technical measures for the detection of vulnerabilities on organizationally-managed assets (platform applications) at least monthly.\n Implementation guidelines and tools provided for the CSP apply.\n \n SaaS Customer: \n While CSPs implement their own security measures, CSCs also have specific implementation responsibilities to address vulnerabilities and strengthen their defenses.\n \n SaaS CSC implementation guidelines for vulnerabilities identification include (but are not limited to):\n a. Configuration Deviations Identification: A secure configuration baseline should be established for the subscribed SaaS applications and configurations regularly reviewed against the baseline to identify possible deviations\n b. Access Control Misconfigurations Identification: Review user access roles and user/processes access permissions to ensure they are aligned with the principle of least privilege\n c. Weak Default Settings Identification:\n i. Review default application settings and configurations in the SaaS application to identify any potential security weaknesses\n ii. Regularly assess default settings ensuring alignment with the SaaS CSP security guidelines and/or industry best practices for the secure configuration of SaaS applications settings\n d. API Misconfigurations Identification: Review API documentation and access logs to identify any potential API vulnerabilities\n e. Lack of Data Encryption Identification: Identify sensitive data stored within SaaS applications and determine whether it is encrypted at rest and in transit\n f. Lack of MFA Identification: Review authentication settings for SaaS applications to determine if MFA is enabled\n g. Insufficient Logging and Auditing Identification: Review logging and auditing configurations to ensure they are capturing SaaS application-relevant security events\n h. Missing Patches Identification: Regularly check for and apply security updates to SaaS applications and cloud services\n i. Network Security Misconfigurations Identification: Review firewall rules and network security settings to ensure they are properly configured to protect SaaS applications\n j. Shadow IT Identification: Shadow IT discovery tools should be implemented to identify unauthorized SaaS applications usage. Encourage employees to report their use of non-sanctioned SaaS applications\n k. Improper Data Retention Identification: Review retained data and data retention policies to ensure they align with regulatory requirements and business needs\n l. Lack of incident response procedures: Establish clear incident response procedures for addressing security incidents involving SaaS applications.\n m. CSP Vulnerability Reports: Regularly review vulnerability reports from SaaS vendors to identify vulnerabilities in SaaS applications\n \n The CSC should be able to request from the CSP a summary of identified vulnerabilities on the application they consume, and learn how they are tracked and verified following remediation.\n \n Applicable to all service models:\n The implementation guidelines provided for the CSP apply."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Vulnerability Prioritization",
        "Control ID": "TVM-08",
        "Control Specification": "Use a risk-based model for effective prioritization of vulnerability\n remediation using an industry recognized framework.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n The implementation responsibility for this control is shared between both parties CSP and CSC, and both are independently responsible for implementing a risk-based model for vulnerability prioritization according to their own business needs and compliance requirements, and irrespectively of the cloud service delivery models (IaaS/PaaS/SaaS). Each party, CSP and CSC is responsible for the remediation of vulnerabilities identified within the assets they own and securely manage.\n \n Implementation Guidelines.\n Applicable to all service models:\n Vulnerability prioritization is a critical security control for CSPs to effectively manage and mitigate security risks in cloud environments. By prioritizing vulnerabilities based on their potential impact and likelihood of exploitation, CSPs can focus their resources on the most critical threats and reduce the overall attack surface of their cloud infrastructure.\n \n For all identified vulnerabilities on the host infrastructure, network devices, virtualization technologies, operating systems, platform applications such as databases, and web applications, the CSP should use a risk-based model for effective prioritization of vulnerability remediation using an industry-recognized framework, such as but not limited to: CVSS, the OWASP risk rating methodology, etc.\n \n Vulnerabilities should be prioritized in terms of their relative risk, importance, organizational impact, and urgency. When evaluating impact, the CSP should consider exposure levels to applicable threats from its specific usage and/or implementation. When evaluating importance, the CSP should consider the criticality and value of the affected assets. Finally, when assessing urgency, the CSP should consider the CVSS ratings and timeframes, the relevance to current and ongoing threats, and the effort required for remediation.\n \n Implementation best practices for vulnerabilities prioritization include (but not be limited to):\n a. Risk-based Vulnerabilities Prioritization: \n i. Vulnerabilities that pose the greatest risk to the cloud organization should be prioritized first, based on their severity, likelihood of exploitation, and potential impact\n ii. A vulnerability prioritization matrix can be used to guide decision-making and ensure a consistent approach to vulnerability management\n b. Vulnerability Scoring System (CVSS): CVSS should be integrated into the vulnerabilities management process and used for assessing the severity of vulnerabilities based on their potential impact and exploitability. With CVSS, CSPs can objectively prioritize vulnerabilities and make informed decisions about remediation efforts\n c. Threat Intelligence Feeds: Threat intelligence feeds provide real-time information about emerging threats, vulnerabilities, and exploits and should be integrated into the vulnerability management processes to dynamically prioritize vulnerabilities\n d. Asset Criticality: Vulnerabilities prioritization should consider the criticality of the assets affected (i.e., Assets with higher criticality, such as those that store sensitive data or support critical business functions, should be prioritized for remediation)\n e. Remediation Workflows: CSPs should establish clear remediation workflows to ensure that prioritized vulnerabilities are addressed promptly and effectively\n f. Prioritization Effectiveness: The effectiveness of vulnerability prioritization strategies should be continuously measured (e.g., by tracking remediation times), to help refine prioritization criteria and improve overall security effectiveness\n g. CSCs Collaboration: The CSP should collaborate with the CSCs to understand their specific security requirements and priorities in order to tailor its vulnerability prioritization strategies to better align with CSC needs and risk tolerance\n h.Continuous Monitoring and Evaluation: The CSP should continuously monitor and adopt evolving cloud security best practices, including those related to vulnerability prioritization",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n For all identified vulnerabilities on virtual machines, platform applications, the CSC should use a risk-based model for effective prioritization of vulnerability remediation using an industry-recognized framework such as but not limited to: CVSS, OWASP risk rating methodology, EPSS, SSVC, etc.\n \n SaaS CSCs should consider prioritizing vulnerabilities on the SaaS application as part of the cloud service they consume to protect their data, maintain business continuity, and comply with security regulations.\n \n Here are some key steps SaaS CSCs should take to prioritize vulnerabilities:\n a. Understand the SaaS CSP’s vulnerability management (VM) program: The maturity and effectiveness of the SaaS vendor's VM program should be assessed and understood. This includes understanding their vulnerability scanning frequency, prioritization criteria, remediation processes, and communication protocols.\n b. Vulnerability Disclosure and Remediation: The CSPs's responsibilities for vulnerability disclosure, remediation timelines, and communication procedures should be understood. Ensure that the vendor's service level agreement (SLA) includes specific commitments related to vulnerability management\n c. Vulnerability Reports and Remediation Progress: Vulnerability reports provided by the SaaS CSP should be regularly reviewed and their progress tracked in remediating critical vulnerabilities. This information should be used to assess the vendor's responsiveness and overall VM effectiveness\n d. Independent Vulnerability Scans: Conducting independent vulnerability scans on the SaaS application should be considered to supplement the CSP's scanning efforts. This can provide additional assurance and identify any vulnerabilities that may have been missed by the vendor's scans\n e. CSC Risk Tolerance: The severity of vulnerabilities should be assessed based on SaaS CSC risk tolerance and the potential impact on its business. Vulnerabilities that affect critical data should be prioritized, essential business functions supported, when posing a high likelihood of exploitation.\n f. SaaS CSP Communication: Maintain open communication with the SaaS vendor regarding vulnerabilities. Share your prioritization criteria and collaborate on remediation plans to ensure that vulnerabilities are addressed promptly and effectively\n g. Third-party Vulnerability Management: Using third-party vulnerability management services should be considered to provide an independent assessment of the SaaS application's security posture and identify potential vulnerabilities\n h. Emerging Threats and Vulnerabilities: Security advisories and threat intelligence feeds should be continuously monitored to stay up-to-date on emerging threats and vulnerabilities that could affect the SaaS application\n i. Vulnerability Prioritization Strategy Update: As the CSC business needs and the threat landscape evolve, the vulnerability prioritization strategy should be regularly reviewed and updated to ensure that it aligns with the current risk tolerance and security requirements\n \n By following these steps, SaaS CSCs can effectively prioritize vulnerabilities, reduce security risks, and protect their data and business operations from potential threats.\n Note: Under a non-disclosure agreement (NDA) and based on contractual agreement, the CSC may be able to request from the CSP a summary of identified vulnerabilities on the application they consume, and how they are tracked and verified following remediation.\n \n Applicable to all service models:\n The implementation guidelines provided for the CSP apply."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Vulnerability Management Reporting",
        "Control ID": "TVM-09",
        "Control Specification": "Define and implement a process for tracking and reporting vulnerability\n identification and remediation activities that includes stakeholder notification.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n The implementation responsibility for this control is shared between both parties CSP and CSC, and both are independently responsible for implementing a vulnerabilities tracking and reporting process, according to their own business needs and compliance requirements, and irrespectively of the cloud service delivery models (IaaS/PaaS/SaaS). The CSP and CSC are responsible for tracking and reporting vulnerability identifications within the assets they own and securely manage.\n \n Implementation Guidelines.\n Applicable to all service models:\n For all identified vulnerabilities on the host infrastructure, network devices, virtualization technologies, operating systems, platform applications such as databases, and web applications, the CSP is responsible for defining and implementing a process for tracking and reporting vulnerability identification and remediation activities that includes stakeholder notification.\n \n The integrated TVM system should have comprehensive vulnerability tracking capabilities. Capabilities should include tracking when discoveries were made and remediated, systems impacted, reasons for the delay (where applicable), and any communications with stakeholders.\n \n Implementation guidelines of a tracking and reporting system for all service models include (but not be limited to):\n a. Tracking System: A tracking system should be established to maintain a record of all vulnerabilities identified, prioritized, and remediated. This system should provide a view of vulnerability history, remediation status, and remaining open issues\n i. The format and structure of vulnerability data stored in the tracking system should be standardized\n ii. The aggregation of vulnerability data from various sources should be automated, where possible, including vulnerability scanners, remediation tools, and third-party feeds\n iii. CSP APIs should be leveraged to automatically collect vulnerability data from cloud services and resources to provide real-time visibility into cloud-specific vulnerabilities\n iv. A secure platform established for sharing threat intelligence and vulnerability information with CSCs. APIs and integration options for CSCs should be offered, to incorporate vulnerability remediation data into their own security tools\n b. Reporting and Notification: \n i. A process and procedure should be implemented to communicate remediation plans to stakeholders, providing clear timelines and expected outcomes for vulnerability resolution\n ii. Standardized reporting templates should be created that communicate vulnerability information, including context and content about the vulnerability, asset classification, vulnerability severity, potential impact and recommended remediation steps\n iii. Reports can be tailored to the specific needs and interests of different stakeholder groups, such as security teams, application owners, and business stakeholders\n iv. The distribution of vulnerability reports could be automated and sent to relevant stakeholders via email, secure file sharing platforms, or designated intranet channels\n v. All relevant stakeholders who need to be notified about vulnerability identification and remediation activities should be identified (e.g., security teams, product development teams, CSC support teams, and external auditors)\n vi. A notification protocol should be defined for alerting stakeholders about newly identified vulnerabilities. This protocol should specify the severity threshold for triggering notifications, the channels for communication, and the escalation process for critical vulnerabilities\n vii. A record of all notifications sent to stakeholders, including the date, time, recipient, and vulnerability details should be maintained\n viii. Escalation procedures should exist for notifying senior management or external parties in the event of severe or widespread vulnerabilities",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP applies.\n \n Implementation Guidelines.\n For all identified vulnerabilities as a result of application misconfiguration, the CSC is responsible for defining and implementing a process for tracking and reporting vulnerability identification and remediation activities that includes stakeholder notification. \n \n Additionally, under non-disclosure agreement (NDA) and based on contractual agreement, the CSC may be able to request from the CSP a summary of identified vulnerabilities on the application they consume, and how they are tracked and verified following remediation so these also can be reported to stakeholders.\n \n Applicable to all service models:\n The implementation guidelines provided for the CSP apply."
    },
    {
        "Control Domain": "Threat & Vulnerability Management",
        "Control Title": "Vulnerability Management Metrics",
        "Control ID": "TVM-10",
        "Control Specification": "Establish, monitor and report metrics for vulnerability identification\n and remediation at defined intervals.",
        "Control Ownership by Service Delivery Model - IaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - PaaS": "Shared (Independent)",
        "Control Ownership by Service Delivery Model - SaaS": "Shared (Independent)",
        "CCM Implementation Guidelines v2.0  - Cloud Service Provider": "Control Ownership Rationale.\n The implementation responsibility for this control is shared between both CSP and CSC, and both are independently responsible for establishing, monitor and report metrics on vulnerabilities identification and remediation, according to their own business needs and compliance requirements, and irrespectively of the cloud service delivery models (IaaS/PaaS/SaaS). The CSP and CSC should each have established a defined frequency of collecting metrics for vulnerability identification, remediation, and reporting within the assets they own and securely manage. This activity can be part of an existing and overarching policy and standard such as TVM, Vulnerability Scanning, and Patch Management policies.\n \n Implementation Guidelines.\n Applicable to all service models:\n For all identified vulnerabilities on the host infrastructure, network devices, virtualization technologies, operating systems, platform applications such as databases, and web applications, the CSP is responsible for establishing, monitoring, and reporting metrics for vulnerability identification and remediation at defined intervals.\n \n The integrated TVM system should be used to collect and report metrics about the vulnerability management program. Metrics should demonstrate the coverage, efficacy, and efficiency of operational TVM activities.\n Vulnerability management metrics should be used in assessing the effectiveness of an organization's efforts to identify, prioritize, and remediate vulnerabilities. \n a. A process should be implemented to track vulnerability management metrics over time to identify trends, assess progress, and make data-driven decisions to enhance security posture (e.g., of metrics such as time-to-remediate, number of vulnerabilities closed, and recurrence of vulnerabilities)\n b. Vulnerability management metrics should be benchmarked against industry standards and best practices to identify areas for improvement\n \n Here are some examples of vulnerability management metrics:\n c. Vulnerability Identification Rate:\n i. Definition: The rate at which new vulnerabilities are identified within the organization's systems\n ii. Metric Calculation: Number of newly identified vulnerabilities / Total assets or systems\n d. Time-to-Remediate:\n i. Definition: The average time taken to remediate or mitigate identified vulnerabilities\n ii. Metric Calculation: Average time from vulnerability discovery to resolution\n e. Vulnerability Severity Distribution:\n i. Definition: Breakdown of identified vulnerabilities based on their severity levels (e.g., critical, high, medium, low)\n ii. Metric Calculation: Percentage distribution of vulnerabilities by severity level\n f. Open Vulnerabilities Over Time:\n i. Definition: The trend of open vulnerabilities tracked over a specific period\n ii. Metric Calculation: Number of open vulnerabilities at specific intervals (daily, weekly, monthly)\n g. Patch Compliance Rate:\n i. Definition: Percentage of systems or assets that are up-to-date with the latest patches\n ii. Metric Calculation: (Number of patched systems / Total systems) * 100\n h. False Positive Rate:\n i. Definition: The percentage of reported vulnerabilities that are later determined to be false positives\n ii. Metric Calculation: (Number of false positives / Total vulnerabilities reported) * 100\n i. Vulnerability Rescan Rate:\n i. Definition: Frequency at which vulnerability scans are repeated to verify remediation effectiveness\n ii. Metric Calculation: Number of vulnerability rescan events per month or quarter\n j. Top Remediated Vulnerabilities:\n i. Definition: Identification of the most frequently remediated vulnerabilities\n ii. Metric Calculation: Number of times specific vulnerabilities are remediated\n k. Vulnerability Aging:\n i. Definition: Average age of open vulnerabilities, indicating how long vulnerabilities remain unresolved\n ii. Metric Calculation: Average time vulnerabilities have been open (current date - discovery date)\n l. Coverage of Vulnerability Assessments:\n i. Definition: Percentage of systems or assets that undergo regular vulnerability assessments\n ii. Metric Calculation: (Number of assessed systems / Total systems) * 100\n \n These metrics help organizations gauge their vulnerability management program's efficiency, identify areas for improvement, and demonstrate the overall security posture.",
        "CCM Implementation Guidelines v2.0  - Cloud Service Consumer": "Control Ownership Rationale.\n The control ownership rationale provided for the CSP apply.\n \n Implementation Guidelines.\n The implementation guidelines provided for the CSP apply."
    }
]